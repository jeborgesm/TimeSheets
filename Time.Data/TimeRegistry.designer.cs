#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimeSheets.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="admin_TimeRegistry")]
	public partial class TimeRegistryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCapital_Proyect(Capital_Proyect instance);
    partial void UpdateCapital_Proyect(Capital_Proyect instance);
    partial void DeleteCapital_Proyect(Capital_Proyect instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProyect(Proyect instance);
    partial void UpdateProyect(Proyect instance);
    partial void DeleteProyect(Proyect instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    #endregion
		
		public TimeRegistryDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["admin_TimeRegistryConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TimeRegistryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimeRegistryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimeRegistryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimeRegistryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Capital_Proyect> Capital_Proyects
		{
			get
			{
				return this.GetTable<Capital_Proyect>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Proyect> Proyects
		{
			get
			{
				return this.GetTable<Proyect>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
	}
	
	[Table(Name="dbo.Capital_Proyects")]
	public partial class Capital_Proyect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<char> _strGLAccount;
		
		private EntitySet<Proyect> _Proyects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstrGLAccountChanging(System.Nullable<char> value);
    partial void OnstrGLAccountChanged();
    #endregion
		
		public Capital_Proyect()
		{
			this._Proyects = new EntitySet<Proyect>(new Action<Proyect>(this.attach_Proyects), new Action<Proyect>(this.detach_Proyects));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_strGLAccount", DbType="VarChar(1)")]
		public System.Nullable<char> strGLAccount
		{
			get
			{
				return this._strGLAccount;
			}
			set
			{
				if ((this._strGLAccount != value))
				{
					this.OnstrGLAccountChanging(value);
					this.SendPropertyChanging();
					this._strGLAccount = value;
					this.SendPropertyChanged("strGLAccount");
					this.OnstrGLAccountChanged();
				}
			}
		}
		
		[Association(Name="Capital_Proyect_Proyect", Storage="_Proyects", ThisKey="id", OtherKey="id_Capital_Proyects")]
		public EntitySet<Proyect> Proyects
		{
			get
			{
				return this._Proyects;
			}
			set
			{
				this._Proyects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Proyects(Proyect entity)
		{
			this.SendPropertyChanging();
			entity.Capital_Proyect = this;
		}
		
		private void detach_Proyects(Proyect entity)
		{
			this.SendPropertyChanging();
			entity.Capital_Proyect = null;
		}
	}
	
	[Table(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _id;
		
		private string _strTitle;
		
		private string _strComment;
		
		private System.DateTime _dtStartDate;
		
		private System.DateTime _dtEndDate;
		
		private System.DateTime _dtCreation;
		
		private System.Data.Linq.Binary _dtLastModification;
		
		private System.Nullable<int> _id_Proyects;
		
		private System.Nullable<int> _id_Resource;
		
		private System.Nullable<int> _id_Services;
		
		private EntityRef<Proyect> _Proyect;
		
		private EntityRef<Resource> _Resource;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(decimal value);
    partial void OnidChanged();
    partial void OnstrTitleChanging(string value);
    partial void OnstrTitleChanged();
    partial void OnstrCommentChanging(string value);
    partial void OnstrCommentChanged();
    partial void OndtStartDateChanging(System.DateTime value);
    partial void OndtStartDateChanged();
    partial void OndtEndDateChanging(System.DateTime value);
    partial void OndtEndDateChanged();
    partial void OndtCreationChanging(System.DateTime value);
    partial void OndtCreationChanged();
    partial void OndtLastModificationChanging(System.Data.Linq.Binary value);
    partial void OndtLastModificationChanged();
    partial void Onid_ProyectsChanging(System.Nullable<int> value);
    partial void Onid_ProyectsChanged();
    partial void Onid_ResourceChanging(System.Nullable<int> value);
    partial void Onid_ResourceChanged();
    partial void Onid_ServicesChanging(System.Nullable<int> value);
    partial void Onid_ServicesChanged();
    #endregion
		
		public Task()
		{
			this._Proyect = default(EntityRef<Proyect>);
			this._Resource = default(EntityRef<Resource>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public decimal id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_strTitle", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string strTitle
		{
			get
			{
				return this._strTitle;
			}
			set
			{
				if ((this._strTitle != value))
				{
					this.OnstrTitleChanging(value);
					this.SendPropertyChanging();
					this._strTitle = value;
					this.SendPropertyChanged("strTitle");
					this.OnstrTitleChanged();
				}
			}
		}
		
		[Column(Storage="_strComment", DbType="VarChar(1024)", UpdateCheck=UpdateCheck.Never)]
		public string strComment
		{
			get
			{
				return this._strComment;
			}
			set
			{
				if ((this._strComment != value))
				{
					this.OnstrCommentChanging(value);
					this.SendPropertyChanging();
					this._strComment = value;
					this.SendPropertyChanged("strComment");
					this.OnstrCommentChanged();
				}
			}
		}
		
		[Column(Storage="_dtStartDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime dtStartDate
		{
			get
			{
				return this._dtStartDate;
			}
			set
			{
				if ((this._dtStartDate != value))
				{
					this.OndtStartDateChanging(value);
					this.SendPropertyChanging();
					this._dtStartDate = value;
					this.SendPropertyChanged("dtStartDate");
					this.OndtStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_dtEndDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime dtEndDate
		{
			get
			{
				return this._dtEndDate;
			}
			set
			{
				if ((this._dtEndDate != value))
				{
					this.OndtEndDateChanging(value);
					this.SendPropertyChanging();
					this._dtEndDate = value;
					this.SendPropertyChanged("dtEndDate");
					this.OndtEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_dtCreation", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime dtCreation
		{
			get
			{
				return this._dtCreation;
			}
			set
			{
				if ((this._dtCreation != value))
				{
					this.OndtCreationChanging(value);
					this.SendPropertyChanging();
					this._dtCreation = value;
					this.SendPropertyChanged("dtCreation");
					this.OndtCreationChanged();
				}
			}
		}
		
		[Column(Storage="_dtLastModification", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary dtLastModification
		{
			get
			{
				return this._dtLastModification;
			}
			set
			{
				if ((this._dtLastModification != value))
				{
					this.OndtLastModificationChanging(value);
					this.SendPropertyChanging();
					this._dtLastModification = value;
					this.SendPropertyChanged("dtLastModification");
					this.OndtLastModificationChanged();
				}
			}
		}
		
		[Column(Storage="_id_Proyects", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> id_Proyects
		{
			get
			{
				return this._id_Proyects;
			}
			set
			{
				if ((this._id_Proyects != value))
				{
					if (this._Proyect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ProyectsChanging(value);
					this.SendPropertyChanging();
					this._id_Proyects = value;
					this.SendPropertyChanged("id_Proyects");
					this.Onid_ProyectsChanged();
				}
			}
		}
		
		[Column(Storage="_id_Resource", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> id_Resource
		{
			get
			{
				return this._id_Resource;
			}
			set
			{
				if ((this._id_Resource != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ResourceChanging(value);
					this.SendPropertyChanging();
					this._id_Resource = value;
					this.SendPropertyChanged("id_Resource");
					this.Onid_ResourceChanged();
				}
			}
		}
		
		[Column(Storage="_id_Services", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> id_Services
		{
			get
			{
				return this._id_Services;
			}
			set
			{
				if ((this._id_Services != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ServicesChanging(value);
					this.SendPropertyChanging();
					this._id_Services = value;
					this.SendPropertyChanged("id_Services");
					this.Onid_ServicesChanged();
				}
			}
		}
		
		[Association(Name="Proyect_Task", Storage="_Proyect", ThisKey="id_Proyects", OtherKey="id", IsForeignKey=true)]
		public Proyect Proyect
		{
			get
			{
				return this._Proyect.Entity;
			}
			set
			{
				Proyect previousValue = this._Proyect.Entity;
				if (((previousValue != value) 
							|| (this._Proyect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Proyect.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Proyect.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._id_Proyects = value.id;
					}
					else
					{
						this._id_Proyects = default(Nullable<int>);
					}
					this.SendPropertyChanged("Proyect");
				}
			}
		}
		
		[Association(Name="Resource_Task", Storage="_Resource", ThisKey="id_Resource", OtherKey="id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._id_Resource = value.id;
					}
					else
					{
						this._id_Resource = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		[Association(Name="Service_Task", Storage="_Service", ThisKey="id_Services", OtherKey="id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._id_Services = value.id;
					}
					else
					{
						this._id_Services = default(Nullable<int>);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _strTitle;
		
		private string _strDescription;
		
		private System.Nullable<System.DateTime> _dtCreation;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstrTitleChanging(string value);
    partial void OnstrTitleChanged();
    partial void OnstrDescriptionChanging(string value);
    partial void OnstrDescriptionChanged();
    partial void OndtCreationChanging(System.Nullable<System.DateTime> value);
    partial void OndtCreationChanged();
    #endregion
		
		public Client()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_strTitle", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string strTitle
		{
			get
			{
				return this._strTitle;
			}
			set
			{
				if ((this._strTitle != value))
				{
					this.OnstrTitleChanging(value);
					this.SendPropertyChanging();
					this._strTitle = value;
					this.SendPropertyChanged("strTitle");
					this.OnstrTitleChanged();
				}
			}
		}
		
		[Column(Storage="_strDescription", DbType="VarChar(1024)")]
		public string strDescription
		{
			get
			{
				return this._strDescription;
			}
			set
			{
				if ((this._strDescription != value))
				{
					this.OnstrDescriptionChanging(value);
					this.SendPropertyChanging();
					this._strDescription = value;
					this.SendPropertyChanged("strDescription");
					this.OnstrDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_dtCreation", DbType="DateTime")]
		public System.Nullable<System.DateTime> dtCreation
		{
			get
			{
				return this._dtCreation;
			}
			set
			{
				if ((this._dtCreation != value))
				{
					this.OndtCreationChanging(value);
					this.SendPropertyChanging();
					this._dtCreation = value;
					this.SendPropertyChanged("dtCreation");
					this.OndtCreationChanged();
				}
			}
		}
		
		[Association(Name="Client_Product", Storage="_Products", ThisKey="id", OtherKey="id_Client")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[Table(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _strTitle;
		
		private int _id_Client;
		
		private EntitySet<Proyect> _Proyects;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstrTitleChanging(string value);
    partial void OnstrTitleChanged();
    partial void Onid_ClientChanging(int value);
    partial void Onid_ClientChanged();
    #endregion
		
		public Product()
		{
			this._Proyects = new EntitySet<Proyect>(new Action<Proyect>(this.attach_Proyects), new Action<Proyect>(this.detach_Proyects));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_strTitle", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string strTitle
		{
			get
			{
				return this._strTitle;
			}
			set
			{
				if ((this._strTitle != value))
				{
					this.OnstrTitleChanging(value);
					this.SendPropertyChanging();
					this._strTitle = value;
					this.SendPropertyChanged("strTitle");
					this.OnstrTitleChanged();
				}
			}
		}
		
		[Column(Storage="_id_Client", DbType="Int NOT NULL")]
		public int id_Client
		{
			get
			{
				return this._id_Client;
			}
			set
			{
				if ((this._id_Client != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ClientChanging(value);
					this.SendPropertyChanging();
					this._id_Client = value;
					this.SendPropertyChanged("id_Client");
					this.Onid_ClientChanged();
				}
			}
		}
		
		[Association(Name="Product_Proyect", Storage="_Proyects", ThisKey="id", OtherKey="id_Products")]
		public EntitySet<Proyect> Proyects
		{
			get
			{
				return this._Proyects;
			}
			set
			{
				this._Proyects.Assign(value);
			}
		}
		
		[Association(Name="Client_Product", Storage="_Client", ThisKey="id_Client", OtherKey="id", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._id_Client = value.id;
					}
					else
					{
						this._id_Client = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Proyects(Proyect entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Proyects(Proyect entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.Proyects")]
	public partial class Proyect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _strTitle;
		
		private System.Nullable<System.DateTime> _dtStartDate;
		
		private System.Nullable<System.DateTime> _dtEndDate;
		
		private System.Nullable<int> _id_Products;
		
		private System.Nullable<int> _id_Capital_Proyects;
		
		private System.Nullable<int> _id_Resource;
		
		private EntitySet<Task> _Tasks;
		
		private EntityRef<Capital_Proyect> _Capital_Proyect;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstrTitleChanging(string value);
    partial void OnstrTitleChanged();
    partial void OndtStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OndtStartDateChanged();
    partial void OndtEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OndtEndDateChanged();
    partial void Onid_ProductsChanging(System.Nullable<int> value);
    partial void Onid_ProductsChanged();
    partial void Onid_Capital_ProyectsChanging(System.Nullable<int> value);
    partial void Onid_Capital_ProyectsChanged();
    partial void Onid_ResourceChanging(System.Nullable<int> value);
    partial void Onid_ResourceChanged();
    #endregion
		
		public Proyect()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Capital_Proyect = default(EntityRef<Capital_Proyect>);
			this._Product = default(EntityRef<Product>);
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_strTitle", DbType="VarChar(255)")]
		public string strTitle
		{
			get
			{
				return this._strTitle;
			}
			set
			{
				if ((this._strTitle != value))
				{
					this.OnstrTitleChanging(value);
					this.SendPropertyChanging();
					this._strTitle = value;
					this.SendPropertyChanged("strTitle");
					this.OnstrTitleChanged();
				}
			}
		}
		
		[Column(Storage="_dtStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> dtStartDate
		{
			get
			{
				return this._dtStartDate;
			}
			set
			{
				if ((this._dtStartDate != value))
				{
					this.OndtStartDateChanging(value);
					this.SendPropertyChanging();
					this._dtStartDate = value;
					this.SendPropertyChanged("dtStartDate");
					this.OndtStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_dtEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> dtEndDate
		{
			get
			{
				return this._dtEndDate;
			}
			set
			{
				if ((this._dtEndDate != value))
				{
					this.OndtEndDateChanging(value);
					this.SendPropertyChanging();
					this._dtEndDate = value;
					this.SendPropertyChanged("dtEndDate");
					this.OndtEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_id_Products", DbType="Int")]
		public System.Nullable<int> id_Products
		{
			get
			{
				return this._id_Products;
			}
			set
			{
				if ((this._id_Products != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ProductsChanging(value);
					this.SendPropertyChanging();
					this._id_Products = value;
					this.SendPropertyChanged("id_Products");
					this.Onid_ProductsChanged();
				}
			}
		}
		
		[Column(Storage="_id_Capital_Proyects", DbType="Int")]
		public System.Nullable<int> id_Capital_Proyects
		{
			get
			{
				return this._id_Capital_Proyects;
			}
			set
			{
				if ((this._id_Capital_Proyects != value))
				{
					if (this._Capital_Proyect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_Capital_ProyectsChanging(value);
					this.SendPropertyChanging();
					this._id_Capital_Proyects = value;
					this.SendPropertyChanged("id_Capital_Proyects");
					this.Onid_Capital_ProyectsChanged();
				}
			}
		}
		
		[Column(Storage="_id_Resource", DbType="Int")]
		public System.Nullable<int> id_Resource
		{
			get
			{
				return this._id_Resource;
			}
			set
			{
				if ((this._id_Resource != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ResourceChanging(value);
					this.SendPropertyChanging();
					this._id_Resource = value;
					this.SendPropertyChanged("id_Resource");
					this.Onid_ResourceChanged();
				}
			}
		}
		
		[Association(Name="Proyect_Task", Storage="_Tasks", ThisKey="id", OtherKey="id_Proyects")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="Capital_Proyect_Proyect", Storage="_Capital_Proyect", ThisKey="id_Capital_Proyects", OtherKey="id", IsForeignKey=true)]
		public Capital_Proyect Capital_Proyect
		{
			get
			{
				return this._Capital_Proyect.Entity;
			}
			set
			{
				Capital_Proyect previousValue = this._Capital_Proyect.Entity;
				if (((previousValue != value) 
							|| (this._Capital_Proyect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Capital_Proyect.Entity = null;
						previousValue.Proyects.Remove(this);
					}
					this._Capital_Proyect.Entity = value;
					if ((value != null))
					{
						value.Proyects.Add(this);
						this._id_Capital_Proyects = value.id;
					}
					else
					{
						this._id_Capital_Proyects = default(Nullable<int>);
					}
					this.SendPropertyChanged("Capital_Proyect");
				}
			}
		}
		
		[Association(Name="Product_Proyect", Storage="_Product", ThisKey="id_Products", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Proyects.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Proyects.Add(this);
						this._id_Products = value.id;
					}
					else
					{
						this._id_Products = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[Association(Name="Resource_Proyect", Storage="_Resource", ThisKey="id_Resource", OtherKey="id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.Proyects.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.Proyects.Add(this);
						this._id_Resource = value.id;
					}
					else
					{
						this._id_Resource = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Proyect = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Proyect = null;
		}
	}
	
	[Table(Name="dbo.Resource")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _strName;
		
		private string _strLastname;
		
		private System.Nullable<System.Guid> _id_User;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<Proyect> _Proyects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstrNameChanging(string value);
    partial void OnstrNameChanged();
    partial void OnstrLastnameChanging(string value);
    partial void OnstrLastnameChanged();
    partial void Onid_UserChanging(System.Nullable<System.Guid> value);
    partial void Onid_UserChanged();
    #endregion
		
		public Resource()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Proyects = new EntitySet<Proyect>(new Action<Proyect>(this.attach_Proyects), new Action<Proyect>(this.detach_Proyects));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_strName", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string strName
		{
			get
			{
				return this._strName;
			}
			set
			{
				if ((this._strName != value))
				{
					this.OnstrNameChanging(value);
					this.SendPropertyChanging();
					this._strName = value;
					this.SendPropertyChanged("strName");
					this.OnstrNameChanged();
				}
			}
		}
		
		[Column(Storage="_strLastname", DbType="VarChar(128)")]
		public string strLastname
		{
			get
			{
				return this._strLastname;
			}
			set
			{
				if ((this._strLastname != value))
				{
					this.OnstrLastnameChanging(value);
					this.SendPropertyChanging();
					this._strLastname = value;
					this.SendPropertyChanged("strLastname");
					this.OnstrLastnameChanged();
				}
			}
		}
		
		[Column(Storage="_id_User", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> id_User
		{
			get
			{
				return this._id_User;
			}
			set
			{
				if ((this._id_User != value))
				{
					this.Onid_UserChanging(value);
					this.SendPropertyChanging();
					this._id_User = value;
					this.SendPropertyChanged("id_User");
					this.Onid_UserChanged();
				}
			}
		}
		
		[Association(Name="Resource_Task", Storage="_Tasks", ThisKey="id", OtherKey="id_Resource")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[Association(Name="Resource_Proyect", Storage="_Proyects", ThisKey="id", OtherKey="id_Resource")]
		public EntitySet<Proyect> Proyects
		{
			get
			{
				return this._Proyects;
			}
			set
			{
				this._Proyects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_Proyects(Proyect entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_Proyects(Proyect entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	[Table(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _strTitle;
		
		private string _strDesc;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstrTitleChanging(string value);
    partial void OnstrTitleChanged();
    partial void OnstrDescChanging(string value);
    partial void OnstrDescChanged();
    #endregion
		
		public Service()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_strTitle", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string strTitle
		{
			get
			{
				return this._strTitle;
			}
			set
			{
				if ((this._strTitle != value))
				{
					this.OnstrTitleChanging(value);
					this.SendPropertyChanging();
					this._strTitle = value;
					this.SendPropertyChanged("strTitle");
					this.OnstrTitleChanged();
				}
			}
		}
		
		[Column(Storage="_strDesc", DbType="VarChar(1024)")]
		public string strDesc
		{
			get
			{
				return this._strDesc;
			}
			set
			{
				if ((this._strDesc != value))
				{
					this.OnstrDescChanging(value);
					this.SendPropertyChanging();
					this._strDesc = value;
					this.SendPropertyChanged("strDesc");
					this.OnstrDescChanged();
				}
			}
		}
		
		[Association(Name="Service_Task", Storage="_Tasks", ThisKey="id", OtherKey="id_Services")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
}
#pragma warning restore 1591
